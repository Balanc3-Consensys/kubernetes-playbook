- name: Kubernetes Playbook
  hosts: localhost
  connection: local
  gather_facts: False
#  no_log: True 
  vars:
    service_template: "service.j2"
    service_canary_template: "service-canary.j2"
    endpoints_template: "endpoints.j2"
    secret_template: "secret.j2"
    daemonset_template: "daemonset.j2"
    deployment_template: "deployment.j2"
    hpa_template: "hpa.j2"
    configmap_template: "configmap.j2"
    limits_template: "limits.j2"
    pv_template: "pv.j2"
    pvc_template: "pvc.j2"
    dest_path: .
    services: []
    daemonsets: []
    deployments: []
    sidecars: []
    configmaps: []
    persistentVolumes: []
    persistentVolumeClaims: []
    limits: []

  tasks:

    # Persistent Volumes
    - name: Persistent Volume template
      template: src={{pv_template}} dest={{dest_path}}/{{item.name}}-pv.json
      with_items: "{{ persistentVolumes }}"
      changed_when: False
      tags: [pv, template]
    
    - name: Apply Persistent Volumes
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path}}/{{item.name}}-pv.json 
      with_items: "{{ persistentVolumes }}"
      when: not ansible_check_mode
      tags: [pv]

    # Persistent Volume Claims
    - name: Persistent Volume Claim template
      template: src={{pvc_template}} dest={{dest_path}}/{{item.name}}-pvc.json
      with_items: "{{ persistentVolumeClaims }}"
      changed_when: False
      tags: [pvc, template]

    - name: Apply Persistent Volume Claims
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path}}/{{item.name}}-pvc.json
      with_items: "{{ persistentVolumeClaims }}"
      when: not ansible_check_mode
      tags: [pvc]

    # Limits
    - name: limits template
      template: src={{limits_template}} dest={{dest_path}}/limits.json
      with_items: "{{ limits }}"
      changed_when: False
      tags: [limits, template]

    - name: apply limits
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/limits.json'}}
      with_items: "{{ limits }}"
      when: not ansible_check_mode
      tags: [limits]

    # ConfigMap

    - name: configmap template
      template: src={{configmap_template}} dest={{dest_path}}/{{item.name}}-configmap.json
      with_items: "{{ configmaps }}"
      changed_when: False
      tags: [configmap, template]

    - name: apply configmaps
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-configmap.json'}}
      with_items: "{{ configmaps }}"
      when: not ansible_check_mode
      tags: [configmap]

    # Secrets

    - name: secret template
      template: src={{secret_template}} dest={{dest_path}}/{{item.name}}-secret.json
      with_items: "{{ secrets }}"
      changed_when: False
      tags: [secret, template]

    - name: apply secrets
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-secret.json'}}
      with_items: "{{ secrets }}"
      when: not ansible_check_mode
      tags: [secret]

    # DaemonSets

    - name: daemonset template
      template: src={{daemonset_template}} dest={{dest_path}}/{{item.name}}-daemonset.json
      with_items: "{{ daemonsets }}"
      changed_when: False
      tags: [daemonset, template]

    - name: apply daemonsets
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-daemonset.json'}}
      with_items: "{{ daemonsets }}"
      when: not ansible_check_mode
      tags: [daemonset]

    - name: get daemonsets
      command: kubectl --server="{{kubernetes_master}}" get daemonsets -o json
      register: existing_daemonsets
      check_mode: no 
      changed_when: False
      tags: [daemonset, audit, delete]

    - name: audit daemonsets
      debug: msg="daemonset {{ item.metadata.name }} was not defined"
      with_items: "{{ (existing_daemonsets.stdout|from_json)['items']|map(attribute='metadata.name')|difference(daemonsets|map(attribute='name'))|list }}"
      tags: [daemonset, audit, delete]

    - name: delete undefined daemonsets
      command: kubectl --server="{{kubernetes_master}}" delete daemonset "{{ item.metadata.name }}"
      with_items: "{{ (existing_daemonsets.stdout|from_json)['items']|map(attribute='metadata.name')|difference(daemonsets|map(attribute='name'))|list }}"
      when: not ansible_check_mode
      tags: [daemonset, delete]

    # Services

    - name: service template
      template: src={{service_template}} dest={{dest_path}}/{{item.name}}-service.json
      with_items: "{{ services }}"
      changed_when: False
      tags: [service, template]

    - name: apply services
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-service.json'}}
      with_items: "{{ services }}"
      when: not ansible_check_mode
      tags: [service]

    - name: get services
      command: kubectl --server="{{kubernetes_master}}" get services -l "component!=apiserver,canary!=true" -o json
      register: existing_services
      check_mode: no 
      changed_when: False
      tags: [service, audit, delete]

    - name: audit services
      debug: msg="service {{ item.metadata.name }} was not defined"
      with_items: "{{ (existing_services.stdout|from_json)['items']|map(attribute='metadata.name')|difference(services|map(attribute='name'))|list }}"
      tags: [service, audit, delete]

    - name: delete undefined services
      command: kubectl --server="{{kubernetes_master}}" delete service "{{ item }}"
      with_items: "{{ (existing_services.stdout|from_json)['items']|map(attribute='metadata.name')|difference(services|map(attribute='name'))|list }}"
      when: not ansible_check_mode
      tags: [service, delete]

    # Canary Services

    - name: canary service template
      template: src={{service_canary_template}} dest={{dest_path}}/{{item.name}}-canary-service.json
      with_items: "{{ services|selectattr('canary', 'defined')|list }}"
      changed_when: False
      tags: [canary, service, template]

    - name: apply canary services
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-canary-service.json'}}
      with_items: "{{ services|selectattr('canary', 'defined')|list }}"
      when: not ansible_check_mode
      tags: [canary, service]

    # Deployments

    - name: get deployments
      command: kubectl --server="{{kubernetes_master}}" get deployments -l "canary!=true" -o json
      register: existing_deployments
      check_mode: no 
      changed_when: False
      tags: [deployment, audit, delete, template]

    - name: deployment template
      template: src={{deployment_template}} dest={{dest_path}}/{{item.name}}-deployment.json
      vars:
        service_name: "{{ item.name }}"
        containers: "{{ item.containers }}"
        canary: False
      with_items: "{{ services|selectattr('containers', 'defined')|list }}"
      changed_when: False
      tags: [deployment, template, test]

    - name: apply deployments
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-deployment.json'}}
      with_items: "{{ services|selectattr('containers', 'defined')|list }}"
      when: not ansible_check_mode
      tags: [deployment]

    - name: audit deployments
      debug: msg="deployment {{ item.metadata.name }} was not defined"
      with_items: "{{ (existing_deployments.stdout|from_json)['items']|map(attribute='metadata.name')|difference(services|map(attribute='name'))|list }}"
      tags: [deployment, audit, delete]

    - name: delete undefined deployments
      command: kubectl --server="{{kubernetes_master}}" delete deployment "{{ item.metadata.name }}"
      with_items: "{{ (existing_deployments.stdout|from_json)['items']|map(attribute='metadata.name')|difference(services|map(attribute='name'))|list }}"
      when: not ansible_check_mode
      tags: [deployment, delete]

    # Canary Deployments

    - name: canary deployment template
      template: src={{deployment_template}} dest={{dest_path}}/{{item.name}}-canary-deployment.json
      vars:
        service_name: "{{ item.name }}-canary"
        containers: "{{ item.canary.containers }}"
        canary: True
      with_items: "{{ services|selectattr('canary', 'defined')|list }}"
      changed_when: False
      tags: [canary, deployment, template]

    - name: apply canary deployments
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-canary-deployment.json'}}
      with_items: "{{ services|selectattr('canary', 'defined')|list }}"
      when: not ansible_check_mode
      tags: [canary, deployment]

    # Horizontal Pod Autoscaler

    - name: get hpa
      command: kubectl --server="{{kubernetes_master}}" get hpa -o json
      register: existing_hpa
      check_mode: no 
      changed_when: False
      tags: [hpa, audit, delete, template]

    - name: hpa template
      template: src={{hpa_template}} dest={{dest_path}}/{{item.name}}-hpa.json
      with_items: "{{ services|selectattr('autoscale', 'defined')|list }}"
      changed_when: False
      tags: [hpa, template, test]

    - name: apply hpa
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-hpa.json'}}
      with_items: "{{ services|selectattr('autoscale', 'defined')|list }}"
      when: not ansible_check_mode
      tags: [hpa]

    - name: audit hpa
      debug: msg="hpa {{ item.metadata.name }} was not defined"
      with_items: "{{ (existing_hpa.stdout|from_json)['items']|map(attribute='metadata.name')|difference(services|selectattr('autoscale', 'defined')|map(attribute='name'))|list }}"
      tags: [hpa, audit, delete]

    - name: delete undefined hpa
      command: kubectl --server="{{kubernetes_master}}" delete hpa "{{ item.metadata.name }}"
      with_items: "{{ (existing_hpa.stdout|from_json)['items']|map(attribute='metadata.name')|difference(services|selectattr('autoscale', 'defined')|map(attribute='name'))|list }}"
      when: not ansible_check_mode
      tags: [hpa, delete]

    # Endpoints

    - name: endpoints template
      template: src={{endpoints_template}} dest={{dest_path}}/{{item.name}}-endpoints.json
      with_items: "{{ services|selectattr('endpoints', 'defined')|list }}"
      changed_when: False
      tags: [endpoint, template]

    - name: apply endpoints
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-endpoints.json'}}
      with_items: "{{ services|selectattr('endpoints', 'defined')|list }}"
      when: not ansible_check_mode
      tags: [endpoint]
