---
# common tasks file for resources

#- debug: var=resources
#  no_log: False

- name: template
  template:
    src: "templates/{{resource_type}}.j2"
    dest: "{{dest_path}}/{{item.name}}-{{resource_type}}-{{namespace.name|default('default')}}.json"
  with_items: "{{resources}}"
  loop_control:
    label: "{{item.name}}"
  changed_when: False
  check_mode: no
  tags: [template]

- name: get
  raw: kubectl --kubeconfig="{{kubeconfig}}" --namespace="{{namespace.name|default("default")}}" get {{resource_type}} -l "managed=true" -o json
  register: get_results
  check_mode: no
  changed_when: False
  ignore_errors: True
  tags: [audit, delete]

- name: set existing
  when: get_results is succeeded
  set_fact:
    existing_resources: "{{(get_results.stdout|from_json)['items']}}"
  check_mode: no
  tags: [audit, delete]

- name: fallback existing
  when: get_results is failed
  set_fact:
    existing_resources: []
  check_mode: no
  tags: [audit, delete]

- name: set deletes
  set_fact:
    delete_resources: "{{existing_resources|map(attribute='metadata.name')|difference(resources|map(attribute='name'))|list}}"

- name: delete
  raw: kubectl --kubeconfig="{{kubeconfig}}" --namespace="{{namespace.name|default("default")}}" delete {{resource_type}} "{{item}}"
  with_items: "{{delete_resources}}"
  when: item != None and not ansible_check_mode and enable_delete
  tags: [delete]

- name: apply
  raw: kubectl --kubeconfig="{{kubeconfig}}" --namespace="{{namespace.name|default("default")}}" apply -f {{dest_path}}/{{item.name}}-{{resource_type}}-{{namespace.name|default("default")}}.json
  with_items: "{{resources}}"
  when: item != None and not ansible_check_mode
  loop_control:
    label: "{{item.name}}"